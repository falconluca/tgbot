package me.shaohsiung.handler;

import lombok.extern.slf4j.Slf4j;
import me.shaohsiung.ext.ExtMessageContext;
import me.shaohsiung.ext.MemoMessageContext;
import me.shaohsiung.model.Memo;
import me.shaohsiung.model.MemoTag;
import me.shaohsiung.util.ConfirmCodeUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.transaction.support.TransactionTemplate;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

@Slf4j
public class MemoAddHandler implements CommandHandler {
    private final static String CREATE_MEMO_TAG_SQL = "INSERT INTO memo_tag(value) VALUES(?)";

    private final static String CREATE_MEMO_SQL = "INSERT INTO memo(origin_text, created_at, creator_id, " +
            "content, url, confirm_code) VALUES(?, ?, ?, ?, ?, ?)";

    private final static String CREATE_MEMO_TAG_REL = "INSERT INTO memo_tag_rel(tag_id, memo_id) VALUES(?, ?)";
    
    // https://stackoverflow.com/a/1327222/9076327
    private final static String LIST_TAG_IN_SQL = "SELECT value FROM memo_tag WHERE value IN (:values)";
    
    private final JdbcTemplate jdbcTemplate;

    private final TransactionTemplate transactionTemplate;

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    public MemoAddHandler() {
        jdbcTemplate = JdbcFactory.getJdbcTemplate();
        transactionTemplate = JdbcFactory.getTransactionTemplate();
        namedParameterJdbcTemplate = JdbcFactory.getNamedParameterJdbcTemplate();
    }

    @Override
    public Memo handle(ExtMessageContext c) {
        MemoMessageContext ctx = (MemoMessageContext) c;
        return transactionTemplate.execute(status -> {
            // 移除已经存在的tag
            Set<String> tagStrings = ctx.getTags();
            MapSqlParameterSource params = new MapSqlParameterSource()
                    .addValue("values", tagStrings);
            List<String> existTags = namedParameterJdbcTemplate.query(
                    LIST_TAG_IN_SQL, params, (rs, rowNum) -> rs.getString("value"));
            tagStrings.removeAll(existTags);
            
            // 添加新的tag
            List<MemoTag> tags = tagStrings
                    .stream()
                    .map(MemoTag::new)
                    .collect(Collectors.toList());
            for (MemoTag tag : tags) {
                // https://www.baeldung.com/spring-jdbc-autogenerated-keys
                KeyHolder pkHolder = new GeneratedKeyHolder();
                jdbcTemplate.update(tx -> {
                    PreparedStatement ps = tx.prepareStatement(CREATE_MEMO_TAG_SQL, Statement.RETURN_GENERATED_KEYS);
                    ps.setString(1, tag.getValue());
                    return ps;
                }, pkHolder);
                Number memoTagPk = Objects.requireNonNull(pkHolder.getKey());
                tag.setId(memoTagPk.longValue());
            }

            // 添加memo
            Memo memo = Memo
                    .builder()
                    .originText(ctx.getText())
                    .createdAt(LocalDateTime.now())
                    .creatorId(ctx.creatorId())
                    .content(ctx.getContent())
                    .url(ctx.getUrl())
                    .confirmCode(ConfirmCodeUtils.randomConfirmCode())
                    .build();
            KeyHolder pkHolder = new GeneratedKeyHolder();
            jdbcTemplate.update(tx -> {
                PreparedStatement ps = tx.prepareStatement(CREATE_MEMO_SQL, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, memo.getOriginText());
                // https://stackoverflow.com/a/45104131/9076327
                ps.setTimestamp(2, java.sql.Timestamp.valueOf(memo.getCreatedAt()));
                ps.setLong(3, memo.getCreatorId());
                ps.setString(4, memo.getContent());
                ps.setString(5, memo.getUrl());
                ps.setString(6, memo.getConfirmCode());
                return ps;
            }, pkHolder);
            Number memoPk = Objects.requireNonNull(pkHolder.getKey());
            memo.setId(memoPk.longValue());

            // 添加memo和tag的关系
            List<Object[]> rel = tags
                    .stream()
                    .map(MemoTag::getId)
                    .map(tagId -> new Object[]{tagId, memo.getId()})
                    .collect(Collectors.toList());
            jdbcTemplate.batchUpdate(CREATE_MEMO_TAG_REL, rel);
            
            memo.enableSendMessage2DingTalk();
            return memo;
        });
    }
}
